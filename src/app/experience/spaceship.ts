/**Auto-generated by: https://github.com/angular-threejs/gltf
Command: npx angular-three-gltf&#64;2.0.5 src/app/experience/spaceship.glb -o src/app/experience/spaceship.ts --selector app-spaceship --name Spaceship --shadows --importattribute 
Author: Sousinho (https://sketchfab.com/sousinho)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/rusty-spaceship-orange-18541ebed6ce44a9923f9b8dc30d87f5
Title: Rusty Spaceship - Orange
**/

import {
  ChangeDetectionStrategy,
  Component,
  CUSTOM_ELEMENTS_SCHEMA,
  ElementRef,
  input,
  viewChild,
} from '@angular/core';
import { extend, NgtArgs, type NgtThreeElements } from 'angular-three';
import { injectGLTF, injectTexture } from 'angular-three-soba/loaders';
import * as THREE from 'three';
import { Group, Mesh } from 'three';
import type { GLTF } from 'three-stdlib';

import beamPng from './energy-beam-opacity.png' with { loader: 'file' };
import SpaceshipGLTF from './spaceship.glb' with { loader: 'file' };

export type SpaceshipGLTFGLTFResult = GLTF & {
  nodes: {
    Cube001_spaceship_racer_0: THREE.Mesh;
    Cylinder002_spaceship_racer_0: THREE.Mesh;
    Cylinder003_spaceship_racer_0: THREE.Mesh;
    Cube003_spaceship_racer_0: THREE.Mesh;
    Cylinder004_spaceship_racer_0: THREE.Mesh;
    Cube001_RExtr001_spaceship_racer_0: THREE.Mesh;
    Cube001_RPanel003_spaceship_racer_0: THREE.Mesh;
    Cube001_RPanel003_RExtr_spaceship_racer_0: THREE.Mesh;
    Cube002_spaceship_racer_0: THREE.Mesh;
    Cube001_RPanel001_spaceship_racer_0: THREE.Mesh;
    Cube001_RPanel003_RExtr001_spaceship_racer_0: THREE.Mesh;
    Cube005_cockpit_0: THREE.Mesh;
    Sphere_cockpit_0: THREE.Mesh;
  };
  materials: {
    spaceship_racer: THREE.MeshStandardMaterial;
    cockpit: THREE.MeshStandardMaterial;
  };
};

@Component({
  selector: 'app-spaceship',
  template: `
    @if (gltf(); as gltf) {
      <ngt-group #model [parameters]="options()" [dispose]="null">
        @let nodes = gltf.nodes;
        @let materials = gltf.materials;

        <ngt-group [rotation.y]="-Math.PI / 2" [scale]="0.003" [position]="[0.95, 0, -2.235]">
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube001_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[739.257, -64.815, 64.771]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cylinder002_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[739.691, -59.39, -553.376]"
            [rotation]="[Math.PI / 2, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cylinder003_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[742.147, -64.535, -508.885]"
            [rotation]="[Math.PI / 2, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube003_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[737.618, 46.842, -176.413]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cylinder004_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[789.518, 59.453, -224.912]"
            [rotation]="[1.003, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube001_RExtr001_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[745.539, 159.319, -5.922]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube001_RPanel003_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[739.257, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube001_RPanel003_RExtr_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[739.257, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube002_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[736.789, -267.14, -33.214]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube001_RPanel001_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[739.257, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube001_RPanel003_RExtr001_spaceship_racer_0.geometry"
            [material]="materials.spaceship_racer"
            [position]="[739.257, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Cube005_cockpit_0.geometry"
            [material]="materials.cockpit"
            [position]="[739.446, 110.436, 307.179]"
            [rotation]="[0.087, 0, 0]"
          />
          <ngt-mesh
            castShadow
            receiveShadow
            [geometry]="nodes.Sphere_cockpit_0.geometry"
            [material]="materials.cockpit"
            [position]="[739.365, 145.689, 315.602]"
            [rotation]="[0.175, 0, 0]"
          />

          <ngt-mesh [position]="[750, -60, -1350]" [rotation.x]="Math.PI * 0.5">
            <ngt-cylinder-geometry *args="[70, 25, 1600, 15]" />
            <ngt-mesh-basic-material
              transparent
              [color]="[1, 0.4, 0.02]"
              [alphaMap]="texture()"
              [blending]="CustomBlending"
              [blendEquation]="AddEquation"
              [blendDst]="OneFactor"
            />
          </ngt-mesh>
        </ngt-group>

        <ng-content />
      </ngt-group>
    }
  `,
  imports: [NgtArgs],
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class Spaceship {
  protected readonly Math = Math;
  protected readonly CustomBlending = THREE.CustomBlending;
  protected readonly OneFactor = THREE.OneFactor;
  protected readonly AddEquation = THREE.AddEquation;

  options = input({} as Partial<NgtThreeElements['ngt-group']>);

  modelRef = viewChild<ElementRef<Group>>('model');

  protected texture = injectTexture(() => beamPng);
  protected gltf = injectGLTF<SpaceshipGLTFGLTFResult>(() => SpaceshipGLTF, {
    onLoad: (gltf) => {
      this.alphaFix(gltf.materials.spaceship_racer);
      this.alphaFix(gltf.materials.cockpit);
    },
  });

  constructor() {
    extend({ Group, Mesh });
  }

  private alphaFix(material: THREE.MeshStandardMaterial) {
    material.transparent = true;
    material.alphaToCoverage = true;
    material.depthTest = true;
    material.depthWrite = true;
  }
}
